import socket
import pyautogui
import pickle
import cv2
import threading
import numpy as np
from PIL import ImageGrab
import ssl
import time
import logging

HOST = '0.0.0.0'
PORT = 65432
PASSWORD = 'secure_password'  # Token-based authentication

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Setup SSL encryption
context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
context.load_cert_chain(certfile='server.crt', keyfile='server.key')

# Function to capture screen
def capture_screen(client_socket):
    while True:
        screen = ImageGrab.grab()
        screen = np.array(screen)
        _, buffer = cv2.imencode('.jpg', screen, [int(cv2.IMWRITE_JPEG_QUALITY), 80])  # JPEG Compression
        data = pickle.dumps(buffer)
        try:
            client_socket.sendall(data)
        except Exception as e:
            logging.error(f"Error sending screen data: {e}")
            break

# Function to handle client connection
def handle_client(client_socket):
    try:
        client_socket.sendall(b"Password: ")
        client_password = client_socket.recv(1024).decode().strip()

        if client_password != PASSWORD:
            client_socket.sendall(b"Authentication failed.\n")
            logging.warning(f"Authentication failed for client.")
            return
        
        client_socket.sendall(b"Authentication successful.\n")
        logging.info(f"Client authenticated successfully.")

        # Start screen capture thread
        threading.Thread(target=capture_screen, args=(client_socket,), daemon=True).start()

        while True:
            data = client_socket.recv(1024)
            if data == b"exit":
                break
            if data:
                handle_mouse_and_keyboard_events(data)
    except Exception as e:
        logging.error(f"Error with client: {e}")
    finally:
        client_socket.close()
        logging.info("Client disconnected.")

# Function to handle mouse and keyboard events
def handle_mouse_and_keyboard_events(data):
    # Parse the data and handle events here
    pass  # For future improvements to handle mouse/keyboard events

# Start the server
def start_server():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
        server_socket.bind((HOST, PORT))
        server_socket.listen(5)
        logging.info(f"Server listening on {HOST}:{PORT}")

        while True:
            conn, addr = server_socket.accept()
            # Wrap the connection with SSL
            connstream = context.wrap_socket(conn, server_side=True)
            logging.info(f"Connection from {addr}")
            threading.Thread(target=handle_client, args=(connstream,), daemon=True).start()

if __name__ == "__main__":
    start_server()
